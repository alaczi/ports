// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repository/interfaces.go -destination=pkg/repository/mock/mock_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	repository "repository"

	gomock "go.uber.org/mock/gomock"
)

// MockPortRepository is a mock of PortRepository interface.
type MockPortRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortRepositoryMockRecorder
}

// MockPortRepositoryMockRecorder is the mock recorder for MockPortRepository.
type MockPortRepositoryMockRecorder struct {
	mock *MockPortRepository
}

// NewMockPortRepository creates a new mock instance.
func NewMockPortRepository(ctrl *gomock.Controller) *MockPortRepository {
	mock := &MockPortRepository{ctrl: ctrl}
	mock.recorder = &MockPortRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortRepository) EXPECT() *MockPortRepositoryMockRecorder {
	return m.recorder
}

// GetPort mocks base method.
func (m *MockPortRepository) GetPort(ctx context.Context, id string) (*repository.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort", ctx, id)
	ret0, _ := ret[0].(*repository.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort.
func (mr *MockPortRepositoryMockRecorder) GetPort(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockPortRepository)(nil).GetPort), ctx, id)
}

// UpsertPort mocks base method.
func (m *MockPortRepository) UpsertPort(ctx context.Context, port *repository.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPort", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPort indicates an expected call of UpsertPort.
func (mr *MockPortRepositoryMockRecorder) UpsertPort(ctx, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPort", reflect.TypeOf((*MockPortRepository)(nil).UpsertPort), ctx, port)
}
